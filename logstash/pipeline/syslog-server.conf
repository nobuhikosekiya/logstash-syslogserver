input {
  # Listen for syslog messages over both TCP and UDP
  syslog {
    port => 5514
    type => "syslog"
    timezone => "UTC"
    codec => plain {
      charset => "ISO-8859-1"
    }
  }
}

filter {
  # Handle character encoding issues for logs that may contain binary data
  ruby {
    code => "
      event.get('message').force_encoding('ISO-8859-1').encode!('UTF-8', :invalid => :replace, :undef => :replace, :replace => '?')
    "
  }
  
  # Extract hostname from the syslog message
  grok {
    match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:extracted_hostname} %{GREEDYDATA:syslog_message}" }
    tag_on_failure => ["_grokparsefailure_hostname_extract"]
    remove_field => ["tags"]
  }
  
  # Use the extracted hostname for host.name
  if [extracted_hostname] {
    mutate {
      replace => { "[host][name]" => "%{extracted_hostname}" }
      remove_field => ["extracted_hostname"]
    }
  } else {
    # If we couldn't extract hostname, use a default value
    mutate {
      replace => { "[host][name]" => "unknown-host" }
    }
  }
  
  # Parse timestamp from syslog message to @timestamp
  if [syslog_timestamp] {
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      target => "@timestamp"
      timezone => "UTC"
      remove_field => ["syslog_timestamp"]
    }
  }
  
  # Use the syslog_message as the main message
  if [syslog_message] {
    mutate {
      replace => { "message" => "%{syslog_message}" }
      remove_field => ["syslog_message"]
    }
  }
  
  # Store client IP according to ECS
  if [host][ip] {
    mutate {
      add_field => { "[source][ip]" => "%{[host][ip]}" }
    }
  }
  
  # Clean up redundant fields
  if [severity] {
    mutate { rename => { "severity" => "[log][syslog][severity][name]" } }
  }
  
  if [facility] {
    mutate { rename => { "facility" => "[log][syslog][facility][name]" } }
  }
  
  if [priority] {
    mutate { rename => { "priority" => "[log][syslog][priority]" } }
  }
}

output {
  elasticsearch {
    # Use environment variables for the connection
    hosts => ["${ES_ENDPOINT}:${ES_PORT}"]
    ssl => true
    api_key => "${ELASTIC_LOGSTASH_API_KEY}"
    data_stream => true
    data_stream_type => "logs"
    data_stream_dataset => "syslog"
    data_stream_namespace => "${ES_DATA_STREAM_NAMESPACE}"

  }
  
  # Uncomment for debugging
  # stdout { codec => rubydebug }
}